---
import { Image } from 'astro:assets';
const PAGE_TITLE_ID = '_top';
import type { Props } from '@astrojs/starlight/props';
import CallToAction from '@astrojs/starlight/components/CallToAction.astro';

const { data } = Astro.props.entry;
const { title = data.title, tagline, image, actions = [] } = data.hero || {};

const imageAttrs = {
	loading: 'eager' as const,
	decoding: 'async' as const,
	width: 600,
	height: 600,
	alt: image?.alt || '',
};
---

<div class="hero" style="">
	
  <canvas
    id="canvas"
    style="background-color: trasnparent; z-index:1; position: absolute; top:0; left: 0;overflow: hidden; width: 100%; height: 500px;"
  ></canvas>
  <script>
    var c = document.getElementById('canvas');
c.width = window.innerWidth;
c.height = window.innerHeight;

var ctx = c.getContext('2d');
var id;
var x_off;
var y_off;

var min_dist = 0;
var max_dist = 32;
var d = 150;
var n_stars = 50;

var Point = {
  x: 0,
  y: 0
};

var elements = [];

function project2d(point, dist) {
  var p = Object.create(Point);
  p.x = Math.round(d * point.x / (dist));
  p.y = Math.round(d * point.y / (dist));
  return p;
}

var StarElement = {
  p1: null,
  width: 3,
  dist: 0,

  draw: function() {

    var p2 = project2d(this.p1, this.dist);

    if (p2.x + x_off <= 0 || p2.x + x_off > c.width || p2.y + y_off <= 0 || p2.y + y_off > c.height) {
      this.dist = max_dist;
    } else {
      
      var percent = (1- this.dist / max_dist);

      ctx.beginPath();
      ctx.strokeStyle = 'hsl(195,100%,' + (percent * 100) + '%)';

      this.width = percent * 3;
      ctx.rect(p2.x + x_off, p2.y + y_off, this.width, this.width);

      ctx.stroke();
      ctx.closePath();
    }
  }
};

function createElements() {

  for (var i = 0; i < n_stars; i++) {

    var elem = Object.create(StarElement);
    elem.p1 = Object.create(Point);
    elem.p1.x = randomRange(-50, 50);
    elem.p1.y = randomRange(-50, 50);
    elem.dist = randomRange(0, max_dist);
    elements.push(elem);
  }
}

function update() {

  ctx.clearRect(0, 0, c.width, c.height);

  elements.forEach(function(elem, i, arr) {
    elem.dist = elem.dist - 0.2;
    elem.draw();
  });

}

function restart() {
  ctx.clearRect(0, 0, c.width, c.height);
  ctx.lineWidth = 2;
  ctx.moveTo(0, 0);

  x_off = c.width / 2;
  y_off = c.height / 2;

  elements = [];
  createElements();
  id = setInterval(update, 30);
}

restart();

window.onresize = function() {

  c.width = this.innerWidth;
  c.height = this.innerHeight;

  clearInterval(id);
  restart();
};

function randomRange(minVal, maxVal) {
  return Math.floor(Math.random() * (maxVal - minVal - 1)) + minVal;
}
  </script>

	{
		image?.file ? (
			image.file.format === 'svg' ? (
				<img  src={image.file.src} {...imageAttrs} style='z-index:3;' />
			) : (
				<Image src={image.file} {...imageAttrs} style='z-index:3;' />
			)
		) : (
			image?.html && <div class="hero-html sl-flex" style="z-index:3; " set:html={image.html} />
		)
	}
	<div class="sl-flex stack " style="z-index:3;">
		<div class="sl-flex copy">
			<h1 id={PAGE_TITLE_ID} data-page-title set:html={title} />
			{tagline && <div class="tagline" set:html={tagline} />}
		</div>
		{
			actions.length > 0 && (
				<div class="sl-flex actions">
					{actions.map(({ text, ...attrs }) => (
						<CallToAction {...attrs} set:html={text} />
					))}
				</div>
			)
		}
	</div>
</div>

<style>
	.hero {
		display: grid;
		align-items: center;
		gap: 1rem;
		padding-bottom: 1rem;
	}

	.hero > img,
	.hero > .hero-html {
		object-fit: contain;
		width: min(70%, 20rem);
		height: auto;
		margin-inline: auto;
	}

	.stack {
		flex-direction: column;
		gap: clamp(1.5rem, calc(1.5rem + 1vw), 2rem);
		text-align: center;
	}

	.copy {
		flex-direction: column;
		gap: 1rem;
		align-items: center;
	}

	.copy > * {
		max-width: 50ch;
	}

	h1 {
		font-size: clamp(var(--sl-text-3xl), calc(0.25rem + 5vw), var(--sl-text-6xl));
		line-height: var(--sl-line-height-headings);
		font-weight: 600;
		color: var(--sl-color-white);
	}

	.tagline {
		font-size: clamp(var(--sl-text-base), calc(0.0625rem + 2vw), var(--sl-text-xl));
		color: var(--sl-color-gray-2);
	}

	.actions {
		gap: 1rem 2rem;
		flex-wrap: wrap;
		justify-content: center;
	}

	@media (min-width: 50rem) {
		.hero {
			grid-template-columns: 4fr 7fr;
			gap: 3%;
			padding-block: clamp(2.5rem, calc(1rem + 10vmin), 10rem);
		}

		.hero > img,
		.hero > .hero-html {
			order: 0;
			width: min(100%, 25rem);
		}

		.stack {
			text-align: start;
		}

		.copy {
			align-items: center;
		}

		.actions {
			justify-content: center;
		}
	}
</style>
